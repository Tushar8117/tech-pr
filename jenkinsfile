pipeline {
    agent any
    environment {
        ECR_REPO_NAME = "my-ecr-repo"
        AWS_REGION = "ap-south-1"
        DOCKER_IMAGE = "442426880129.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checkout the code'
                git branch: 'main', url: 'https://github.com/Tushar8117/tech-pr.git'
            }
        }
        stage('Setup ECR') {
            steps {
                dir('src') {
                    script {
                        withCredentials([aws(credentialsId: 'aws-id', region: "${AWS_REGION}")]) {
                            sh '''
                            terraform init
                            terraform plan -out=tfplan
                            terraform apply -auto-approve tfplan
                            '''
                        }
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('src') {
                    script {
                        withCredentials([aws(credentialsId: 'aws-id', region: "${AWS_REGION}")]) {
                            sh '''
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}
                            docker build -t ${DOCKER_IMAGE}:latest .
                            docker push ${DOCKER_IMAGE}:latest
                            '''
                        }
                    }
                }
            }
        }
        stage('Setup Lambda, RDS, and S3') {
            steps {
                dir('terraform') {
                    script {
                        withCredentials([aws(credentialsId: 'aws-id', region: "${AWS_REGION}")]) {
                            sh '''
                            terraform init
                            terraform plan -out=tfplan
                            terraform apply -auto-approve tfplan
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                echo 'Pipeline failed. Destroying all resources...'
                withCredentials([aws(credentialsId: 'aws-id', region: "${AWS_REGION}")]) {
                    // Destroy all resources created by Terraform
                    sh '''
        
                    terraform destroy -auto-approve 
                    '''
                }
            }
        }
        always {
            echo 'Pipeline execution completed.'
        }
    }
}
